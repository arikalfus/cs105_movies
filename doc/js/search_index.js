var search_data = {"index":{"searchIndex":["datastorage","moviedata","movietest","object","testmovie","add_movie_rating()","add_user_review()","compare_movies_seen()","compute_stats()","get_all_ratings()","get_all_ratings()","get_movie_ids()","get_movie_ids()","get_user_ids()","get_user_ids()","load_data()","load_data()","load_file()","mean()","most_similar()","movies()","movies()","new()","new()","new()","popularity()","popularity_list()","predict()","print_most_similar()","print_popularity_list()","rating()","rating()","rms()","run_test()","similarity()","stddev()","test_load_data()","test_popularity()","test_popularity_list()","test_prediction()","test_run_test()","test_similarity()","to_a()","variance()","viewers()","viewers()","readme","rakefile","pa1.sh","pa2.sh","readme","allbut.pl","mku.sh","u.data","u.genre","u.info","u.occupation","u.user","u1.base","u1.test","u2.base","u2.test","u3.base","u3.test","u4.base","u4.test","u5.base","u5.test","ua.base","ua.test","ub.base","ub.test","test","movie_data.gemspec","movie_data.gemspec~"],"longSearchIndex":["datastorage","moviedata","movietest","object","testmovie","datastorage#add_movie_rating()","datastorage#add_user_review()","moviedata#compare_movies_seen()","movietest#compute_stats()","datastorage#get_all_ratings()","moviedata#get_all_ratings()","datastorage#get_movie_ids()","moviedata#get_movie_ids()","datastorage#get_user_ids()","moviedata#get_user_ids()","datastorage#load_data()","moviedata#load_data()","object#load_file()","movietest#mean()","moviedata#most_similar()","datastorage#movies()","moviedata#movies()","datastorage::new()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","object#print_most_similar()","object#print_popularity_list()","datastorage#rating()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","testmovie#test_load_data()","testmovie#test_popularity()","testmovie#test_popularity_list()","testmovie#test_prediction()","testmovie#test_run_test()","testmovie#test_similarity()","movietest#to_a()","movietest#variance()","datastorage#viewers()","moviedata#viewers()","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["DataStorage","","DataStorage.html","","<p>Class loads and stores movie data. noinspection\nRubyInstanceMethodNamingConvention\n"],["MovieData","","MovieData.html","","<p>noinspection RubyInstanceMethodNamingConvention\n"],["MovieTest","","MovieTest.html","",""],["Object","","Object.html","",""],["TestMovie","","TestMovie.html","",""],["add_movie_rating","DataStorage","DataStorage.html#method-i-add_movie_rating","(user_id, movie_id, rating)","<p>Movie ratings are stored as a hash from user id =&gt; rating per movie id\nin a larger hash\n"],["add_user_review","DataStorage","DataStorage.html#method-i-add_user_review","(user_id, movie_id)","<p>User reviews are stored as an array of movie id&#39;s per user id in a hash\n"],["compare_movies_seen","MovieData","MovieData.html#method-i-compare_movies_seen","(movies, user1, user2)","\n<pre>Computes similarity between two users&#39; movies in common.\nThis similarity is defined as 5 points per movie, ...</pre>\n"],["compute_stats","MovieTest","MovieTest.html#method-i-compute_stats","()",""],["get_all_ratings","DataStorage","DataStorage.html#method-i-get_all_ratings","(movie_id)","<p>Returned as Hash of hashes from user id =&gt; rating\n"],["get_all_ratings","MovieData","MovieData.html#method-i-get_all_ratings","(movie_id, set=:training)","<p>Get all ratings of a certain movie in either training or test data.\nReturned as array of hashes from …\n"],["get_movie_IDs","DataStorage","DataStorage.html#method-i-get_movie_IDs","()",""],["get_movie_IDs","MovieData","MovieData.html#method-i-get_movie_IDs","(set=:training)","\n<pre>Get all movie IDs in either training or test data.</pre>\n<p>execute_from_set decides which procedure to evaluate …\n"],["get_user_IDs","DataStorage","DataStorage.html#method-i-get_user_IDs","()",""],["get_user_IDs","MovieData","MovieData.html#method-i-get_user_IDs","(set=:training)","<p>Get all user IDs in either training or test data. #execute_from_set decides\nwhich procedure to evaluate …\n"],["load_data","DataStorage","DataStorage.html#method-i-load_data","(file)","<p>Creates review mappings from lines in a data file.\n<p>see #add_user_review and #add_movie_rating\n"],["load_data","MovieData","MovieData.html#method-i-load_data","()","\n<pre>Creates review mappings from lines in a data file.</pre>\n<p>see DataStorage#load_data, DataStorage#add_user_review …\n"],["load_file","Object","Object.html#method-i-load_file","(folder)",""],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>Returns average prediction error\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u)","<p>Returns a list of users whose tastes are most similar to the tastes of u\n"],["movies","DataStorage","DataStorage.html#method-i-movies","(user_id)","<p>Returned as array of movie IDs\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id, set=:training)","<p>Get all movies reviewed by a certain user in either training or test data.\nReturned as array of movie …\n"],["new","DataStorage","DataStorage.html#method-c-new","()",""],["new","MovieData","MovieData.html#method-c-new","(params)","\n<pre>If no test file is given, use default initialization.</pre>\n<p>see #initialize_defaults, #initialize_with_test …\n"],["new","MovieTest","MovieTest.html#method-c-new","(params)","<p>params is an array of hashes, each made up of :user_id, :movie_id, :rating,\nand :prediction\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Computes popularity of a movie Popularity is defined as the total number of\nratings multiplied by average …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","\n<pre>Generates a list of movie id&#39;s ordered by popularity</pre>\n<p>see #popularity\n"],["predict","MovieData","MovieData.html#method-i-predict","(user_id, movie_id)","<p>Returns estimate of what a user would rate a movie between 1.0 and 5.0.\nEstimation is calculated based …\n"],["print_most_similar","Object","Object.html#method-i-print_most_similar","(movie_data)",""],["print_popularity_list","Object","Object.html#method-i-print_popularity_list","(movie_data)",""],["rating","DataStorage","DataStorage.html#method-i-rating","(user_id, movie_id)",""],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id, set=:training)","<p>Find specific movie rating. If user did not rate movie, returns 0.\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>Returns root mean square error of a prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k=@test_file.count)",""],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","\n<pre>Rounds similarity to two decimal places.</pre>\n<p>see #compare_movies_seen\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>Returns standard deviation of error\n"],["test_load_data","TestMovie","TestMovie.html#method-i-test_load_data","()",""],["test_popularity","TestMovie","TestMovie.html#method-i-test_popularity","()",""],["test_popularity_list","TestMovie","TestMovie.html#method-i-test_popularity_list","()",""],["test_prediction","TestMovie","TestMovie.html#method-i-test_prediction","()","<p>def test_total_sim\n\n<pre>movie_data = MovieData.new folder: &#39;./data/ml-100k&#39;\nmovie_data.load_data\nusers = movie_data.get_user_IDs ...</pre>\n"],["test_run_test","TestMovie","TestMovie.html#method-i-test_run_test","()",""],["test_similarity","TestMovie","TestMovie.html#method-i-test_similarity","()",""],["to_a","MovieTest","MovieTest.html#method-i-to_a","()",""],["variance","MovieTest","MovieTest.html#method-i-variance","()","<p>Returns variance of error\n"],["viewers","DataStorage","DataStorage.html#method-i-viewers","(movie_id)","<p>Get all users who have reviewed a certain movie\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id, set=:training)","<p>Get all users who have reviewed a certain movie in either training or test\ndata.\n"],["README","","README_md.html","","<p>cs105_movies &lt;a href=“codeclimate.com/github/arikalfus/cs105_movies”><img src=“codeclimate.com/github/arikalfus/cs105_movies/badges/gpa.svg …\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs &lt;&lt; &quot;tests&quot;\nt.test_files = FileList[&#39;tests/test*.rb&#39;] ...</pre>\n"],["pa1.sh","","bin/pa1_sh.html","","<p>#!/bin/bash\n<p>ruby ../lib/execPA1.rb\n"],["pa2.sh","","bin/pa2_sh.html","","<p>#!/bin/bash\n<p>ruby ../lib/execPA2.rb\n"],["README","","data/ml-100k/README.html","","<p>SUMMARY &amp; USAGE LICENSE\n<p>\n<p>MovieLens data sets were collected by the GroupLens Research Project at the\n…\n"],["allbut.pl","","data/ml-100k/allbut_pl.html","","<p>#!/usr/local/bin/perl\n<p># get args if (@ARGV &lt; 3) {\n\n<pre>print STDERR &quot;Usage: $0 base_name start stop max_test ...</pre>\n"],["mku.sh","","data/ml-100k/mku_sh.html","","<p>#!/bin/sh\n<p>trap `rm -f tmp.$$; exit 1` 1 2 15\n<p>for i in 1 2 3 4 5 do\n"],["u.data","","data/ml-100k/u_data.html","","<p>196     242     3       881250949 186     302     3       891717742 22     \n377     1       878887116 …\n"],["u.genre","","data/ml-100k/u_genre.html","","<p>unknown|0 Action|1 Adventure|2 Animation|3 Children&#39;s|4 Comedy|5\nCrime|6 Documentary|7 Drama|8 Fantasy|9 …\n"],["u.info","","data/ml-100k/u_info.html","","<p>943 users 1682 items 100000 ratings\n"],["u.occupation","","data/ml-100k/u_occupation.html","","<p>administrator artist doctor educator engineer entertainment executive\nhealthcare homemaker lawyer librarian …\n"],["u.user","","data/ml-100k/u_user.html","","<p>1|24|M|technician|85711 2|53|F|other|94043 3|23|M|writer|32067\n4|24|M|technician|43537 5|33|F|other|15213 …\n"],["u1.base","","data/ml-100k/u1_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["u1.test","","data/ml-100k/u1_test.html","","<p>1       6       5       887431973 1       10      3       875693118 1      \n12      5       878542960 …\n"],["u2.base","","data/ml-100k/u2_base.html","","<p>1       3       4       878542960 1       4       3       876893119 1      \n5       3       889751712 …\n"],["u2.test","","data/ml-100k/u2_test.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n8       1       875072484 …\n"],["u3.base","","data/ml-100k/u3_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["u3.test","","data/ml-100k/u3_test.html","","<p>1       5       3       889751712 1       11      2       875072262 1      \n16      5       878543541 …\n"],["u4.base","","data/ml-100k/u4_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["u4.test","","data/ml-100k/u4_test.html","","<p>1       4       3       876893119 1       7       4       875071561 1      \n42      5       876892425 …\n"],["u5.base","","data/ml-100k/u5_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n4       3       876893119 …\n"],["u5.test","","data/ml-100k/u5_test.html","","<p>1       3       4       878542960 1       13      5       875071805 1      \n15      5       875071608 …\n"],["ua.base","","data/ml-100k/ua_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["ua.test","","data/ml-100k/ua_test.html","","<p>1       20      4       887431883 1       33      4       878542699 1      \n61      4       878542420 …\n"],["ub.base","","data/ml-100k/ub_base.html","","<p>1       1       5       874965758 1       2       3       876893171 1      \n3       4       878542960 …\n"],["ub.test","","data/ml-100k/ub_test.html","","<p>1       17      3       875073198 1       47      4       875072125 1      \n64      5       875072404 …\n"],["test","","data/test_txt.html","","<p>531     100     5       213 532     100     5       215 531     101     4  \n215 532     101     4 …\n"],["movie_data.gemspec","","movie_data_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["movie_data.gemspec~","","movie_data_gemspec~.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}